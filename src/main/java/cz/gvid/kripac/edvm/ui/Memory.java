/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package cz.gvid.kripac.edvm.ui;

import cz.gvid.kripac.edvm.ui.machine.SimulatorMemory;
import cz.gvid.kripac.edvm.vm.exception.VMRuntimeException;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/**
 *
 * @author misa
 */
public class Memory extends javax.swing.JPanel {
    
    private ArrayList<JTextField> memoryCells = new ArrayList<JTextField>();
    private int memoryPage = 0;
    
    private Simulator simulator;
    
    /**
     * Creates new form Memory
     */
    public Memory(Simulator simulator) {
        this.simulator = simulator;
        initComponents();
        for (int i = 0; i < 16; i++) {
            var cell = new JTextField();
            cell.setEditable(false);
            cell.setText(i + ": 0");
            memoryCells.add(cell);
            cells.add(cell);
        }

        memoryLeft.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        memoryLeft = new javax.swing.JButton();
        cells = new javax.swing.JPanel();
        memoryRight = new javax.swing.JButton();

        memoryLeft.setText("<");
        memoryLeft.setBorder(null);
        memoryLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryLeftActionPerformed(evt);
            }
        });

        cells.setLayout(new java.awt.GridLayout(1, 0));

        memoryRight.setText(">");
        memoryRight.setBorder(null);
        memoryRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(memoryLeft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cells, javax.swing.GroupLayout.PREFERRED_SIZE, 1254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memoryRight)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memoryLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(cells, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(memoryRight, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1324, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(93, 93, 93)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(93, 93, 93)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void memoryLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryLeftActionPerformed
        memoryPage--;
        updateMemory();

        if (memoryPage == 14) {
            memoryRight.setEnabled(true);
        }

        if (memoryPage == 0) {
            memoryLeft.setEnabled(false);
        }

    }//GEN-LAST:event_memoryLeftActionPerformed

    private void memoryRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryRightActionPerformed
        memoryPage++;
        updateMemory();
        if (memoryPage == 15) {
            memoryRight.setEnabled(false);
        }

        if (memoryPage == 1) {
            memoryLeft.setEnabled(true);
        }
    }//GEN-LAST:event_memoryRightActionPerformed

    private void updateMemory() {
        for (int i = 0; i < 16; i++) {
            var cell = memoryCells.get(i);
            cell.setEditable(false);
            var addr = memoryPage * 16 + i;
            cell.setText(addr + ": " + simulator.getMemory().getValue(addr));
            cell.setBackground(Color.DARK_GRAY);
        }
    }
    
    public void highlightCell(int cell) {
        memoryPage = (int) Math.ceil(((double) cell + 1) / 16) - 1;
        updateMemory();
        memoryCells.get(cell - (memoryPage) * 16).setBackground(Color.red);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cells;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton memoryLeft;
    private javax.swing.JButton memoryRight;
    // End of variables declaration//GEN-END:variables
}
